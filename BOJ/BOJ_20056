package _202202_sk_jina;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

// 시간 : 444ms
// 메모리 : 74352KB
public class BOJ_20056 {
	
	static class Fireball {
		int m;
		int s;
		List<Integer> d;
		boolean flag;
		boolean iseven;
		
		public Fireball(int m, int s, int d) {
			super();
			this.m = m;
			this.s = s;
			this.d = new ArrayList<>();
			this.d.add(d);
			this.iseven = d%2==0;
			this.flag = true;
		}
		
		public void add(int m, int s, int d) {
			this.m+=m;
			this.s+=s;
			this.d.add(d);
			if((d%2==0)!=this.iseven) this.flag = false;
		}
	}

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		
		int[] dr = {-1,-1,0,1,1,1,0,-1};
		int[] dc = {0,1,1,1,0,-1,-1,-1};
		
		
		
		Queue<int[]> que = new LinkedList<>();
		
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int r = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			int m = Integer.parseInt(st.nextToken());
			int s = Integer.parseInt(st.nextToken())%N;
			int d = Integer.parseInt(st.nextToken());
			
			que.offer(new int[] {r,c,m,s,d});
		}
		
		for (int i = 0; i < K; i++) {
			Fireball[][] map = new Fireball[N][N];
			int[][] count = new int[N][N];
			while(!que.isEmpty()) {
				int[] cur = que.poll();
				int r = cur[0], c = cur[1], m = cur[2], s = cur[3], d = cur[4];
				int nr = (r + dr[d]*s%N)%N;
				int nc = (c + dc[d]*s%N)%N;
				if(nr<0) nr+=N;
				if(nc<0) nc+=N;
				if (map[nr][nc]==null) map[nr][nc] = new Fireball(m,s,d);
				else map[nr][nc].add(m, s, d);
				count[nr][nc]++;
			}
			for (int j = 0; j < N; j++) {
				for (int k = 0; k < N; k++) {
					if(count[j][k]==1) {
						int m = map[j][k].m;
						int s = map[j][k].s;
						List<Integer> d = map[j][k].d;
						que.offer(new int[] {j,k, m, s, d.get(0)});
					}else if(count[j][k]>1) {
						int m = map[j][k].m;
						int s = map[j][k].s;
						
							if(map[j][k].flag) {
								for (int n = 0; n < 8; n+=2) {
//									System.out.println(j + " " + k + " " + m/5 + " " + s/count[j][k] + " "+ n);

									if(m/5!=0) que.offer(new int[] {j,k, m/5, s/count[j][k], n});
								}
							}else {
								
								for (int n = 1; n < 8; n+=2) {
//									System.out.println(j + " " + k + " " + m/5 + " " + s/count[j][k] + " "+ n);
									if(m/5!=0) que.offer(new int[] {j,k, m/5, s/count[j][k], n});
								}
							}
						
//						System.out.println();
					}
//					System.out.print(map[j][k]==null? 0 : map[j][k].m+" ");
				}
//				System.out.println();
			}
//			System.out.println();
		}
		int answer = 0;
		for (int[] is : que) {
			answer +=is[2];
		}
		System.out.println(answer);
	}

}
